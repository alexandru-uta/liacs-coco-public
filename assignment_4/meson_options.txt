option('with-tests',
  type : 'boolean',
  value : false,
  description : 'Enables tests.')

option('with-lexical',
  type : 'combo',
  choices: ['none', 'own', 'prebuilt', 'make-prebuilt', 'make-prebuilt-debug'],
  value : 'none',
  description : 'Builds Lexical project. Either skip building (default), use own project files, use a prebuilt lib, or make a prebuilt lib (useful for TAs).')

option('with-syntax',
  type : 'combo',
  choices: ['none', 'own', 'prebuilt', 'make-prebuilt', 'make-prebuilt-debug'],
  value : 'none',
  description : 'Builds Syntax project. Either skip building (default), use own project files, use a prebuilt lib, or make a prebuilt lib (useful for TAs).')

option('with-intermediate-code',
  type : 'combo',
  choices: ['none', 'own', 'prebuilt', 'make-prebuilt', 'make-prebuilt-debug'],
  value : 'none',
  description : 'Builds Intermediate-code project. Either skip building (default), use own project files, use a prebuilt lib, or make a prebuilt lib (useful for TAs).')

option('with-machine-code',
  type : 'combo',
  choices: ['none', 'own', 'prebuilt', 'make-prebuilt', 'make-prebuilt-debug'],
  value : 'none',
  description : 'Builds Machine-code project. Either skip building (default), use own project files, use a prebuilt lib, or make a prebuilt lib (useful for TAs).')

option('with-builddir',
  type : 'string',
  value : 'build',
  description : 'Selects the build directory (relative to the root directory) to use when compiling.')

option('with-prebuiltdir',
  type : 'string',
  value : 'prebuilt',
  description : 'Selects the prebuilt directory (relative to the root directory) to use when searching for prebuilt libraries.')